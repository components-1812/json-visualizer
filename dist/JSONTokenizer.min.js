import N from"./utils/color-patterns.js";import m from"./utils/url-patterns.js";export class JSONTokenizer{static version="0.0.3";static URL_PATTERNS=m;static COLOR_PATTERNS=N;tokens=[];constructor(){}tokenize(e,t={}){const{detectURL:s=!1,detectColor:r=!0,strict:p=!1}=t,l=this.clearJSON(e,{strict:p});this.tokens=[];let u=[],o="key",n=0,g=0;const v=l.length;for(;n<l.length;){if(g++,g>v)throw new Error(`Infinite loop detected while tokenizing JSON. Check the input: ${l}`);const i=l[n],k=u.at(-1);if(i==="{"){u.push("{"),this.tokens.push({type:"brace-open",value:i,tags:["brace","open"]}),o="key",n++;continue}if(i==="}"){u.pop(),this.tokens.push({type:"brace-close",value:i,tags:["brace","close"]}),n++;continue}if(i==="["){u.push("["),this.tokens.push({type:"bracket-open",value:i,tags:["bracket","open"]}),o="array-value",n++;continue}if(i==="]"){u.pop(),this.tokens.push({type:"bracket-close",value:i,tags:["bracket","close"]}),n++;continue}if(i===","){this.tokens.push({type:"comma",value:i,tags:["comma"]}),o=k==="{"?"key":"array-value",n++;continue}if(i===":"){this.tokens.push({type:"colon",value:i,tags:["colon"]}),o="value",n++;continue}if(i==='"'){const a=this._parseString(l,n);if(a){const{value:c,endIndex:f}=a,y={type:"string",value:c,tags:["string",o]};if(s){const h=this._isURL(c);h.isURL&&(y.tags.push(`url-${h.type}`),y.url=h.type)}if(r){const h=this._isColor(c);h.isColor&&(y.tags.push(`color-${h.type}`),y.color=h.type)}this.tokens.push({type:"string-open",value:i,tags:["string","open",o]}),this.tokens.push(y),this.tokens.push({type:"string-close",value:i,tags:["string","close",o]}),n=f+1;continue}}if(i==="t"||i==="f"){const a=this._parseBoolean(l,n);if(a){const{value:c,endIndex:f}=a;this.tokens.push({type:"boolean",value:c,tags:["boolean",o,c?"true":"false"]}),n=f+1;continue}}if(i==="n"){const a=this._parseNull(l,n);if(a){const{value:c,endIndex:f}=a;this.tokens.push({type:"null",value:c,tags:["null",o]}),n=f+1;continue}}if(/[0-9\-]/.test(i)){const a=this._parseNumber(l,n);if(a){const{value:c,endIndex:f}=a;this.tokens.push({type:"number",value:c,tags:["number",o]}),n=f+1;continue}}const{value:_,endIndex:d}=this._parseUnknown(l,n);this.tokens.push({type:"unknown",value:_,tags:["unknown",o]}),n=d+1}}clearJSON(e,t={}){if(typeof e?.valueOf()!="string")throw new Error("Invalid JSON input. Expected a string.");const{strict:s="auto"}=t;if(s===!0)return JSON.stringify(JSON.parse(e));if(s===!1)return this._minifyJSON(e);if(s==="auto")try{return JSON.stringify(JSON.parse(e))}catch{return this._minifyJSON(e)}throw new Error("Invalid 'strict' option. Expected true, false, or 'auto'.")}_parseString(e,t){let s=t+1;for(;s<e.length;){if(e.at(s)==="\\"){s+=2;continue}if(e.at(s)==='"')break;s++}const r=s;let p=e.slice(t,r+1);try{return{value:JSON.parse(p),raw:p,endIndex:r}}catch{return null}}_parseNumber(e,t){let s=t;for(;s<e.length&&!this._isDelimiter(e[s]);)s++;const r=e.slice(t,s),p=Number(r);return Number.isNaN(p)?null:{value:p,raw:r,endIndex:s-1}}_parseBoolean(e,t){return e.startsWith("true",t)&&this._isDelimiter(e[t+4])?{value:!0,raw:"true",endIndex:t+3}:e.startsWith("false",t)&&this._isDelimiter(e[t+5])?{value:!1,raw:"false",endIndex:t+4}:null}_parseNull(e,t){return e.startsWith("null",t)&&this._isDelimiter(e[t+4])?{value:null,raw:"null",endIndex:t+3}:null}_parseUnknown(e,t){let s=t;const r=[];for(;s<e.length&&!this._isDelimiter(e[s]);)r.push(e[s]),s++;return{value:r.join(""),raw:r.join(""),endIndex:s-1}}_isDelimiter(e=""){return e===","||e==="}"||e==="]"}_isURL(e=""){if(!e)return{isURL:!1,type:null};if(typeof e!="string")return{isURL:!1,type:null};for(const t of Object.values(JSONTokenizer.URL_PATTERNS))if(t.test(e))return{isURL:!0,type:t.type};return{isURL:!1,type:null}}_isColor(e=""){if(!e)return{isColor:!1,type:null};if(typeof e!="string")return{isColor:!1,type:null};for(const t of Object.values(JSONTokenizer.COLOR_PATTERNS))if(t.test(e))return t.validRange&&!t.validRange(e)?{isColor:!1,type:null}:{isColor:!0,type:t.type};return{isColor:!1,type:null}}_minifyJSON(e){if(typeof e?.valueOf()!="string")throw new Error("Invalid JSON input. Expected a string.");if(e.length===0)return"";let t=[],s=!1,r=!1;const p=e.length;for(let l=0;l<p;l++){const u=e[l];s?(t.push(u),r?r=!1:(u==="\\"&&(r=!0),u==='"'&&(s=!1))):(u!==" "&&u!==`
`&&u!=="	"&&u!=="\r"&&t.push(u),u==='"'&&(s=!0))}return t.join("")}}export default JSONTokenizer;
